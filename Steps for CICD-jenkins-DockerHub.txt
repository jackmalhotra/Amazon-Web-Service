1. Configure Ec2
2. Install java
sudo apt install openjdk-17-jre

3. Install jenkins
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
/etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update
sudo apt-get install jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
-> Run Jenkins on browser <instance_ip>:8080
sudo cat <paste>

******* Jenkins Web Credientials ********
Username : admin-jenkins
Password: Rocky123

4. You may also need to setup Docker hub Credentials in jenkins so that it faclilitates the
Docker push to the DockerHub.

manage jenkins->credientials->add credientials
kind ->Username and password
Username->dockerhub username
password->dockerhub password
ID : Give Id (ID will be used in pipeline)
Click create

5. Install Docker
sudo apt install docker.io
	1. sudo cat /etc/passwd | grep jenkins
	2. sudo usermod -aG docker jenkins (Add Jenkins to Docker Group)
	3. Change sock permission : ubuntu@ip-172-31-41-95:~$ sudo chmod 777 /var/run/docker.sock
	4. sudo systemctl restart jenkins  (Restart Jenkins Service) 
	5. groups jenkins

After installing docker lets restart jenkins
sudo systemctl restart jenkins

6. Install plugins in jenkins
	1. Docker
	2. Docker pipeline
	
7. Add maven tools
	manage jenkins -> tools->Maven 3.9.8

8. Create Jenkins Jobs and pipeline Scripts
pipeline {
    agent any
    tools {
        maven '3.9.8'
    }
    
    environment {
        DOCKER_IMAGE = 'arjuncdockerhub/springboot_app'  // Docker Hub repository name
        WORKSPACE = '/var/lib/jenkins/workspace/SpringBoot-CICD/'
    }

    stages {
        stage('1. Code Checkout and Build') {
            steps {
                echo "Checking out code and building Maven project"
                git url: "https://github.com/jackmalhotra/SpringDemo.git", branch: "master"
                sh "mvn clean install"
            }
        }
        
        stage('2. Build Docker Image') {
            steps {
                echo "Building Docker image"
                dir("${WORKSPACE}") {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }
        
        stage('3.Docker Login'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerhub-Crediential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "docker logout"
                    sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                }
            }
        }
        
        stage('4. Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Docker image pushed to Docker Hub.'
        }
        failure {
            echo 'Pipeline failed. Deployment unsuccessful.'
        }
    }
}

9 . pull images from DockerHub in Ec2 and run as a container
	1. Login-in to DockerHub in Ec2
ubuntu@ip-172-31-41-95:~$ sudo docker login
	username : dockerHub username
	password : dockerHub password
	2. pull dockerHub-images
ubuntu@ip-172-31-41-95:~$ docker pull arjuncdockerhub/springboot_app:latest
	3. Run 
ubuntu@ip-172-31-41-95:~$ docker run --name spring -d -P arjuncdockerhub/springboot_app
	4. check port on which it was running
ubuntu@ip-172-31-41-95:~$ docker container ls

ubuntu@ip-172-31-41-95:~$ docker images
ubuntu@ip-172-31-41-95:~$ docker ps -a  (Checking Existing processes)
ubuntu@ip-172-31-41-95:~$ sudo docker stop Container_Id(55d19c527df6) (for Stopping)
ubuntu@ip-172-31-41-95:~$ sudo docker restart container_name/ID (To restart container)
ubuntu@ip-172-31-41-95:~$ sudo docker exec -it 8107d9d2b26a(Container_Id OR name) bash  (To get into Container)
ubuntu@ip-172-31-41-95:~$ exit (to come outside from container)
ubuntu@ip-172-31-41-95:~$ docker commit 439be1778307(ImageID Or Container ID) arjunchauhan/jack-linux(new image_name)    To commit save new images
ubuntu@ip-172-31-41-95:~$ sudo docker rm -f Container_Id(55d19c527df6)
ubuntu@ip-172-31-41-95:~$ sudo docker rmi -f Image_Id(be3be60d3827)

10. List all open Internet sockets (both listening and non-listening)
ubuntu@ip-172-31-41-95:~$ lsof -i

11. Kill the process  
ubuntu@ip-172-31-41-95:~$ kill -9 process_Id